#ifndef BOT_TEMPLATE
#define BOT_TEMPLATE

/* There exists a board representation in board.h which is used by the arbiter
 * for validating the legality of moves generated by bots. It's NOT an efficient
 * board representation, and if you wanna create a optimized bot, you are
 * recommended to create you own board/move representation for internal usage.
 * The API is designed specifically to allow this. The only requirement is that
 * the final output uses the Position struct to represent it's move. See
 * moveGen.h*/

#include <vector>
#include "moveGen.h" 

//NOTE: your bot is assumed to have a internal board representation
void initBot(char color); //color := 'W' | 'B'

// NOTE: your bot is assumed to have a internal board representation
std::vector<Position> getMove(std::vector<Position> opponentsMove);
/* 
 * Input data: Your opponents move in the form of "from-to". i.e. moved the piece
 * on x1, y1, -> x2, y2. Your bot should then update it's internal board
 * representation 
 *
 * Output: Your bot should, given the state of the board and it's
 * color, produce what it believes is the best possible, legal, move in the form
 * of "from-to" 
 *
 * General note: Position's constructor takes x, y, int's in that
 * order. See boardGen.h for details
 */


#endif
